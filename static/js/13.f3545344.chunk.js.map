{"version":3,"sources":["forms/ChangeClientDataForm/index.jsx"],"names":["ChangeClientDataForm","useForm","defaultValues","people","initialPersonData","resolver","yupResolver","peopleSchemaValidation","control","handleSubmit","watch","fields","useFieldArray","name","handleAddressChange","field","value","_","dadata","onChange","size","onSubmit","data","console","log","map","index","areTheSameAddresses","render","fieldState","getOptionsMethod","getFakeOptions","error","message","label","checked","options","FAKE_REASONS_FOR_LIVING","length","style","margin","type","variant"],"mappings":"0QAkJeA,UA9Hf,WACE,MAAyCC,YAAQ,CAC/CC,cAAe,CACbC,OAAQ,CAACC,sBAEXC,SAAUC,YAAYC,4BAJhBC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,MAOvBC,EAAWC,YAAc,CAC/BJ,UACAK,KAAM,WAFAF,OASFG,EAAsB,SAACC,GAAD,OAAW,SAACC,EAAOC,EAAGC,GAChDH,EAAMI,SAAS,CACbH,QACAE,aAIJ,OACE,gCACE,cAAC,IAAD,CAAGE,KAAM,EAAT,oJAEA,uBAAMC,SAAUZ,GAfH,SAACa,GAChBC,QAAQC,IAAI,qBAAsBF,MAchC,UACGX,EAAOc,KAAI,SAACV,EAAOW,GAClB,IAAMC,EAAsBjB,EAAM,UAAD,OACrBgB,EADqB,yBAIjC,OACE,gCACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEb,KAAI,iBAAYa,EAAZ,wBACJlB,QAASA,EACToB,OAAQ,kBAAGb,EAAH,EAAGA,MAAOc,EAAV,EAAUA,WAAV,OACN,cAAC,IAAD,2BACMd,GADN,IAEEe,iBAAkBC,IAClBZ,SAAUL,EAAoBC,GAC9BC,MAAOD,EAAMC,MAAMA,MACnBgB,MAAK,UAAEH,EAAWG,aAAb,aAAE,EAAkBC,QACzBC,MAAM,4GAMd,cAAC,IAAD,UACE,cAAC,IAAD,CACErB,KAAI,iBAAYa,EAAZ,wBACJlB,QAASA,EACToB,OAAQ,gBAAGb,EAAH,EAAGA,MAAH,OACN,cAAC,IAAD,2BAAcA,GAAd,IAAqBoB,QAASpB,EAAMC,MAApC,qWAQJW,GACA,qCACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEd,KAAI,iBAAYa,EAAZ,gBACJlB,QAASA,EACToB,OAAQ,oBAAGb,EAAH,EAAGA,MAAOc,EAAV,EAAUA,WAAV,OACN,cAAC,IAAD,2BACMd,GADN,IAEEe,iBAAkBC,IAClBZ,SAAUL,EAAoBC,GAC9BC,MAAK,UAAED,EAAMC,aAAR,aAAE,EAAaA,MACpBgB,MAAK,UAAEH,EAAWG,aAAb,aAAE,EAAkBC,QACzBC,MAAM,+KAMd,cAAC,IAAD,UACE,cAAC,IAAD,CACErB,KAAI,iBAAYa,EAAZ,mBACJlB,QAASA,EACToB,OAAQ,kBAAGb,EAAH,EAAGA,MAAOc,EAAV,EAAUA,WAAV,OACN,cAAC,IAAD,2BACMd,GADN,IAEEqB,QAASC,IACTL,MAAK,UAAEH,EAAWG,aAAb,aAAE,EAAkBC,QACzBC,MAAM,oJAQjBvB,EAAO2B,SAAWZ,EAAQ,GACzB,oBACEa,MAAO,CACLC,OAAQ,cAtENd,MA8Ed,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAQe,KAAK,SAASC,QAAQ,UAA9B","file":"static/js/13.f3545344.chunk.js","sourcesContent":["import React from 'react'\nimport { Controller, useFieldArray, useForm } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\n\nimport H from '../../components/H'\nimport FormRow from '../../components/FormRow'\nimport InputSuggest from '../../components/InputSuggest'\nimport Checkbox from '../../components/Checkbox'\nimport SelectBox from '../../components/SelectBox'\nimport Row from '../../components/Grid/Row'\nimport Col from '../../components/Grid/Col'\nimport Button from '../../components/Button'\n\nimport {\n  initialPersonData,\n  peopleSchemaValidation,\n} from '../ChangeClientDataAdvancedForm'\n\nimport { FAKE_REASONS_FOR_LIVING, getFakeOptions } from '../../fakeData'\n\nfunction ChangeClientDataForm() {\n  const { control, handleSubmit, watch } = useForm({\n    defaultValues: {\n      people: [initialPersonData],\n    },\n    resolver: yupResolver(peopleSchemaValidation),\n  })\n\n  const { fields } = useFieldArray({\n    control,\n    name: 'people',\n  })\n\n  const onSubmit = (data) => {\n    console.log('success submit -> ', data)\n  }\n\n  const handleAddressChange = (field) => (value, _, dadata) => {\n    field.onChange({\n      value,\n      dadata,\n    })\n  }\n\n  return (\n    <div>\n      <H size={1}>Изменение данных клиента</H>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        {fields.map((field, index) => {\n          const areTheSameAddresses = watch(\n            `people.${index}.areTheSameAddresses`\n          )\n\n          return (\n            <div key={index}>\n              <FormRow>\n                <Controller\n                  name={`people.${index}.addressRegistration`}\n                  control={control}\n                  render={({ field, fieldState }) => (\n                    <InputSuggest\n                      {...field}\n                      getOptionsMethod={getFakeOptions}\n                      onChange={handleAddressChange(field)}\n                      value={field.value.value}\n                      error={fieldState.error?.message}\n                      label=\"Адрес регистрации\"\n                    />\n                  )}\n                />\n              </FormRow>\n\n              <FormRow>\n                <Controller\n                  name={`people.${index}.areTheSameAddresses`}\n                  control={control}\n                  render={({ field }) => (\n                    <Checkbox {...field} checked={field.value}>\n                      Адрес фактического проживания совпадает с адресом\n                      регистрации\n                    </Checkbox>\n                  )}\n                />\n              </FormRow>\n\n              {!areTheSameAddresses && (\n                <>\n                  <FormRow>\n                    <Controller\n                      name={`people.${index}.realAddress`}\n                      control={control}\n                      render={({ field, fieldState }) => (\n                        <InputSuggest\n                          {...field}\n                          getOptionsMethod={getFakeOptions}\n                          onChange={handleAddressChange(field)}\n                          value={field.value?.value}\n                          error={fieldState.error?.message}\n                          label=\"Адрес фактического проживания\"\n                        />\n                      )}\n                    />\n                  </FormRow>\n\n                  <FormRow>\n                    <Controller\n                      name={`people.${index}.reasonOfLiving`}\n                      control={control}\n                      render={({ field, fieldState }) => (\n                        <SelectBox\n                          {...field}\n                          options={FAKE_REASONS_FOR_LIVING}\n                          error={fieldState.error?.message}\n                          label=\"Основание для проживания\"\n                        />\n                      )}\n                    />\n                  </FormRow>\n                </>\n              )}\n\n              {fields.length !== index + 1 && (\n                <hr\n                  style={{\n                    margin: '30px 0',\n                  }}\n                />\n              )}\n            </div>\n          )\n        })}\n\n        <Row>\n          <Col />\n          <Col>\n            <Button type=\"submit\" variant=\"primary\">\n              Сохранить\n            </Button>\n          </Col>\n        </Row>\n      </form>\n    </div>\n  )\n}\n\nexport default ChangeClientDataForm\n"],"sourceRoot":""}