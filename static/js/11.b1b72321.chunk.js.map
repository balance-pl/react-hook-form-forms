{"version":3,"sources":["api/dadata.js","forms/ContractorDataForm/index.jsx"],"names":["getDadataCall","type","query","count","part","fetch","headers","method","body","JSON","stringify","parts","undefined","then","response","json","suggestions","map","item","index","id","name","value","data","catch","error","console","log","getAddresses","getNames","getPatronymics","getSurnames","ContractorSchema","yup","surname","required","REQUIRED_MESSAGE","cityzenship","address","when","is","val","String","ContractorDataForm","useForm","resolver","yupResolver","control","handleSubmit","isNativeCitizen","watch","autoComplete","onSubmit","alert","H","size","FormRow","render","field","fieldState","InputSuggest","getOptionsMethod","label","message","formState","SelectBox","options","shouldUnregister","Button","variant"],"mappings":"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","file":"static/js/11.b1b72321.chunk.js","sourcesContent":["const getDadataCall =\n  (type) =>\n  (query, count = 5, part = null) =>\n    fetch(\n      `https://front-dhr-st1.dhr-st.dc-yc.b-pl.pro/dadata/suggestions/api/4_1/rs/suggest/${type}/`,\n      {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          count,\n          parts: part ? [part] : undefined,\n          query,\n        }),\n      }\n    )\n      .then((response) => response.json())\n      .then((response) =>\n        response.suggestions.map((item, index) => ({\n          id: index,\n          name: item.value,\n          data: item,\n        }))\n      )\n      .catch((error) => {\n        console.log('error', error)\n        return []\n      })\n\nexport const getAddresses = getDadataCall('address')\nexport const getCompanies = getDadataCall('party')\nexport const getNames = getDadataCall('fio', 'NAME')\nexport const getPatronymics = getDadataCall('fio', 'PATRONYMIC')\nexport const getSurnames = getDadataCall('fio', 'SURNAME')\n","import { Controller, useForm } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport * as yup from 'yup'\n\n// API\nimport {\n  getAddresses,\n  getNames,\n  getPatronymics,\n  getSurnames,\n} from '../../api/dadata'\n\n// Components\nimport Button from '../../components/Button'\nimport FormRow from '../../components/FormRow'\nimport { Col, Row } from '../../components/Grid'\nimport H from '../../components/H'\nimport InputSuggest from '../../components/InputSuggest'\nimport SelectBox from '../../components/SelectBox'\nimport { REQUIRED_MESSAGE } from '../../constants/errors'\n\nconst NATIVE_CITIZEN = 1\nconst FOREIGN_CITIZEN = 2\n\nconst ContractorSchema = yup.object({\n  surname: yup.string().required(REQUIRED_MESSAGE),\n  name: yup.string().required(REQUIRED_MESSAGE),\n  cityzenship: yup.string().required(REQUIRED_MESSAGE),\n  address: yup.string().when('cityzenship', {\n    is: (val) => val === String(NATIVE_CITIZEN),\n    then: yup.string().required(REQUIRED_MESSAGE),\n  }),\n})\n\nfunction ContractorDataForm() {\n  const { control, handleSubmit, watch } = useForm({\n    resolver: yupResolver(ContractorSchema),\n  })\n\n  const onSubmit = (data) => {\n    alert(JSON.stringify(data))\n  }\n\n  const isNativeCitizen = watch('cityzenship') === NATIVE_CITIZEN\n\n  return (\n    <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\n      <H size=\"1\">Данные исполнителя</H>\n      <Row>\n        <Col>\n          <FormRow>\n            <Controller\n              control={control}\n              name=\"surname\"\n              render={({ field, fieldState }) => (\n                <InputSuggest\n                  {...field}\n                  getOptionsMethod={getSurnames}\n                  label=\"Фамилия *\"\n                  error={fieldState.error?.message}\n                />\n              )}\n            />\n          </FormRow>\n        </Col>\n        <Col>\n          <FormRow>\n            <Controller\n              control={control}\n              name=\"name\"\n              render={({ field, fieldState }) => (\n                <InputSuggest\n                  {...field}\n                  getOptionsMethod={getNames}\n                  label=\"Имя *\"\n                  error={fieldState.error?.message}\n                />\n              )}\n            />\n          </FormRow>\n        </Col>\n        <Col>\n          <FormRow>\n            <Controller\n              control={control}\n              name=\"patronymic\"\n              render={({ field, fieldState }) => (\n                <InputSuggest\n                  {...field}\n                  getOptionsMethod={getPatronymics}\n                  label=\"Отчество\"\n                  error={fieldState.error?.message}\n                />\n              )}\n            />\n          </FormRow>\n        </Col>\n        <Col>\n          <FormRow>\n            <Controller\n              name=\"cityzenship\"\n              control={control}\n              render={({ field, fieldState, formState }) => {\n                return (\n                  <SelectBox\n                    {...field}\n                    label=\"Гражданство *\"\n                    name=\"cityzenship\"\n                    options={[\n                      { id: NATIVE_CITIZEN, name: 'Гражданство РФ' },\n                      { id: FOREIGN_CITIZEN, name: 'Иностранный гражданин' },\n                    ]}\n                    error={fieldState.error?.message}\n                  />\n                )\n              }}\n            />\n          </FormRow>\n        </Col>\n      </Row>\n      {isNativeCitizen && (\n        <FormRow>\n          <Controller\n            shouldUnregister\n            control={control}\n            name=\"address\"\n            render={({ field, fieldState }) => (\n              <InputSuggest\n                {...field}\n                getOptionsMethod={getAddresses}\n                label=\"Адрес регистрации *\"\n                error={fieldState.error?.message}\n              />\n            )}\n          />\n        </FormRow>\n      )}\n      <Row>\n        <Col />\n        <Col>\n          <Button variant=\"primary\">Отправить на анализ</Button>\n        </Col>\n      </Row>\n    </form>\n  )\n}\n\nexport default ContractorDataForm\n"],"sourceRoot":""}