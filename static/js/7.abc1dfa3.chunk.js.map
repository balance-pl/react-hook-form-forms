{"version":3,"sources":["components/InputDate/styles.module.scss","icons/IconCalendar.jsx","components/InputDate/index.jsx","forms/EmployeeInfoForm/index.jsx"],"names":["module","exports","IconCalendar","props","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","className","x","y","rx","ry","x1","y1","x2","y2","InputDate","styles","Input","mask","InputDate__Icon","defaultProps","error","value","onBlur","onChange","name","data","onFocus","fakeAddresses","Promise","resolve","id","key1","key2","fakeSurnames","fakeEmployers","employerSchema","yup","surname","required","REQUIRED_MESSAGE","gender","birthday","email","ERROR_MESSAGE_INVALID_EMAIL","phone","EmployeeInfoForm","useForm","resolver","yupResolver","control","handleSubmit","watch","console","log","autoComplete","onSubmit","alert","JSON","stringify","H","size","FormRow","render","field","fieldState","InputSuggest","getOptionsMethod","label","message","SelectBox","options","Button","variant"],"mappings":"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","file":"static/js/7.abc1dfa3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputDate\":\"styles_InputDate__3Gfzb\",\"InputDate__Icon\":\"styles_InputDate__Icon__3m_hb\"};","function IconCalendar(props) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className=\"feather feather-calendar\"\n    >\n      <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" {...props}></rect>\n      <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\n      <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\n      <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\n    </svg>\n  )\n}\n\nexport default IconCalendar\n","import PropTypes from 'prop-types'\n\n// Components\nimport Input from '../Input'\n\n// Icons\nimport IconCalendar from '../../icons/IconCalendar'\n\nimport styles from './styles.module.scss'\n\nfunction InputDate(props) {\n  return (\n    <div className={styles.InputDate}>\n      <Input {...props} mask=\"99.99.9999\" />\n      <div className={styles.InputDate__Icon}>\n        <IconCalendar />\n      </div>\n    </div>\n  )\n}\n\nInputDate.propTypes = {\n  error: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n}\nInputDate.defaultProps = {\n  error: null,\n  mask: null,\n  value: null,\n  onBlur: (props) => {},\n  onChange: (name, props, data) => {},\n  onFocus: (props) => {},\n}\n\nexport default InputDate\n","import { Controller, useForm } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport * as yup from 'yup'\n\n// Components\nimport Button from '../../components/Button'\nimport FormRow from '../../components/FormRow'\nimport { Col, Row } from '../../components/Grid'\nimport H from '../../components/H'\nimport Input from '../../components/Input'\nimport InputDate from '../../components/InputDate'\nimport InputSuggest from '../../components/InputSuggest'\nimport SelectBox from '../../components/SelectBox'\nimport {\n  ERROR_MESSAGE_INVALID_EMAIL,\n  REQUIRED_MESSAGE,\n} from '../../constants/errors'\n\nconst fakeAddresses = () =>\n  Promise.resolve([\n    {\n      id: 1,\n      name: 'г. Москва, ул. Ленина д.23',\n      data: {\n        key1: '1',\n      },\n    },\n    {\n      id: 2,\n      name: 'г. Санкт-Петербург, ул. Пойменная д.23',\n      data: {\n        key2: '2',\n      },\n    },\n  ])\n\nconst fakeSurnames = () =>\n  Promise.resolve([\n    {\n      id: 1,\n      name: 'Иванов 1',\n      data: {\n        key1: '1',\n      },\n    },\n    {\n      id: 2,\n      name: 'Иванов 2',\n      data: {\n        key2: '2',\n      },\n    },\n  ])\n\nconst fakeEmployers = () =>\n  Promise.resolve([\n    {\n      id: 1,\n      name: 'ООО СЫКТЫВКАР КОРПОРЕЙШН',\n      data: {\n        key1: '1',\n      },\n    },\n    {\n      id: 2,\n      name: 'ГАЗПРОМ',\n      data: {\n        key2: '2',\n      },\n    },\n  ])\n\nconst employerSchema = yup.object({\n  surname: yup.string().required(REQUIRED_MESSAGE),\n  name: yup.string().required(REQUIRED_MESSAGE),\n  gender: yup.string().required(REQUIRED_MESSAGE),\n  birthday: yup.string().required(REQUIRED_MESSAGE),\n  email: yup.string().email(ERROR_MESSAGE_INVALID_EMAIL),\n  phone: yup.string().required(REQUIRED_MESSAGE),\n})\n\nfunction EmployeeInfoForm() {\n  const { control, handleSubmit, watch } = useForm({\n    resolver: yupResolver(employerSchema),\n  })\n\n  console.log(\"watch('phone') -> \", watch('phone'))\n\n  const onSubmit = (data) => {\n    alert(JSON.stringify(data))\n  }\n\n  return (\n    <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\n      <H size=\"1\">Информация о сотруднике</H>\n      <FormRow>\n        <Controller\n          name=\"surname\"\n          control={control}\n          render={({ field, fieldState }) => (\n            <InputSuggest\n              {...field}\n              getOptionsMethod={fakeSurnames}\n              label=\"Фамилия *\"\n              error={fieldState.error?.message}\n            />\n          )}\n        />\n      </FormRow>\n      <FormRow>\n        <Controller\n          name=\"name\"\n          control={control}\n          render={({ field, fieldState }) => (\n            <InputSuggest\n              {...field}\n              getOptionsMethod={fakeSurnames}\n              label=\"Имя *\"\n              error={fieldState.error?.message}\n            />\n          )}\n        />\n      </FormRow>\n      <FormRow>\n        <Controller\n          name=\"patronymic\"\n          control={control}\n          render={({ field, fieldState }) => (\n            <InputSuggest\n              {...field}\n              error={fieldState.error?.message}\n              getOptionsMethod={fakeSurnames}\n              label=\"Отчество\"\n            />\n          )}\n        />\n      </FormRow>\n      <Row>\n        <Col>\n          <FormRow>\n            <Controller\n              name=\"gender\"\n              control={control}\n              render={({ field, fieldState }) => (\n                <SelectBox\n                  {...field}\n                  error={fieldState.error?.message}\n                  label=\"Пол *\"\n                  options={[\n                    { id: 'male', name: 'мужской' },\n                    { id: 'female', name: 'женский' },\n                  ]}\n                />\n              )}\n            />\n          </FormRow>\n        </Col>\n        <Col>\n          <FormRow>\n            <Controller\n              control={control}\n              name=\"birthday\"\n              render={({ field, fieldState }) => (\n                <InputDate\n                  {...field}\n                  label=\"Дата рождения *\"\n                  error={fieldState.error?.message}\n                />\n              )}\n            />\n          </FormRow>\n        </Col>\n        <Col>\n          <FormRow>\n            <Controller\n              name=\"phone\"\n              control={control}\n              render={({ field, fieldState }) => (\n                <Input\n                  {...field}\n                  label=\"Мобильный телефон *\"\n                  mask=\"+7 (999) 999-99-99\"\n                  error={fieldState.error?.message}\n                />\n              )}\n            />\n          </FormRow>\n        </Col>\n        <Col>\n          <FormRow>\n            <Controller\n              name=\"email\"\n              control={control}\n              render={({ field, fieldState }) => (\n                <Input\n                  {...field}\n                  label=\"Email\"\n                  error={fieldState.error?.message}\n                />\n              )}\n            />\n          </FormRow>\n        </Col>\n      </Row>\n      <FormRow>\n        <Controller\n          control={control}\n          name=\"address\"\n          render={({ field, fieldState }) => (\n            <InputSuggest\n              {...field}\n              getOptionsMethod={fakeAddresses}\n              label=\"Адрес постоянной регистрации\"\n              error={fieldState.error?.message}\n            />\n          )}\n        />\n      </FormRow>\n      <FormRow>\n        <Controller\n          control={control}\n          name=\"employerName\"\n          render={({ field, fieldState }) => (\n            <InputSuggest\n              {...field}\n              getOptionsMethod={fakeEmployers}\n              label=\"Наименование работодателя\"\n              error={fieldState.error?.message}\n            />\n          )}\n        />\n      </FormRow>\n      <Row>\n        <Col />\n        <Col>\n          <Button variant=\"primary\">Сохранить</Button>\n        </Col>\n      </Row>\n    </form>\n  )\n}\n\nexport default EmployeeInfoForm\n"],"sourceRoot":""}